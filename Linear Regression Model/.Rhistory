# Scatter plot for Sales vs TV
plot(advert$TV, advert$sales, main="Sales vs TV", xlab="TV", ylab="Sales", pch=19, col="blue")
advert=read.csv("Advertising.csv", header=TRUE)
####################################
#        Advertising example
####################################
#sales - thousands of units
#budgets for TV, radio,newspaper - thousands of dollars
advert=read.csv("Advertising.csv", header=TRUE)
####################################
#        Advertising example
####################################
#sales - thousands of units
#budgets for TV, radio,newspaper - thousands of dollars
advert=read.csv("Advertising.csv", header=TRUE)
ls
####################################
#        Advertising example
####################################
#sales - thousands of units
#budgets for TV, radio,newspaper - thousands of dollars
advert=read.csv("Advertising.csv", header=TRUE)
####################################
#        Advertising example
####################################
#sales - thousands of units
#budgets for TV, radio,newspaper - thousands of dollars
advert=read.csv("Advertising.csv", header=TRUE)
source("~/Documents/SIUE/STAT561/Week 2 - Regression.R")
##########  SCATTER PLOTS - Page 3 #######
# Scatter plot for Sales vs TV
plot(advert$TV, advert$sales, main="Sales vs TV", xlab="TV", ylab="Sales", pch=19, col="blue")
##########  SCATTER PLOTS - Page 3 #######
# Scatter plot for Sales vs TV
plot(advert$TV, advert$sales, main="Sales vs TV", xlab="TV", ylab="Sales", pch=19, col="blue")
####################################
#        Advertising example
####################################
#sales - thousands of units
#budgets for TV, radio,newspaper - thousands of dollars
advert=read.csv("Advertising.csv", header=TRUE)
# Reading the data and the data should be in the same directory)
prog=read.table("programming.txt",header=T)
setwd("~/Documents/SIUE/STAT561")
# Reading the data and the data should be in the same directory)
prog=read.table("programming.txt",header=T)
View(prog)
str(prog)
prog$Task_success=factor(prog$Task_success)
str(prog)
attach(prog)
#Boxplot of the data
boxplot(months ~ Task_success, data = prog,
main = "Boxplot of programming data",
xlab = "Task success",
ylab = "Months of experience",
col = c("blue", "brown"),pch="*")
####### Perform logistic regression
library(stats)
model <- glm(Task_success ~ months, family=binomial(link="logit"),
data=prog)
# Summary of the model to get coefficients and statistics
summary(model)
######## Plotting the scatter plot with the sigmoid curve
# Scatter plot of the original data points
plot(months,Task_success, xlab="Months",
ylab="Task Success Probability",
main="Scatter Plot with Logistic Regression Curve",
pch=19, col="purple",cex=0.5)
View(prog)
# Summary of the model to get coefficients and statistics
summary(model)
######## Plotting the scatter plot with the sigmoid curve
# Scatter plot of the original data points
plot(months,Task_success, xlab="Months",
ylab="Task Success Probability",
main="Scatter Plot with Logistic Regression Curve",
pch=19, col="purple",cex=0.5)
# Adding the sigmoid curve
curve(predict(model, data.frame(months=x), type="resp"),
add=TRUE, col="red", lwd=2)
#################### Interpretation of coefficients
beta <- coef(model)
intercept <- beta[1]
slope <- beta[2]
cat("Intercept (log-odds when months of experience is 0):", intercept, "\n")
cat("Slope (change in log-odds of Task success for one unit increase in months of experience):", slope, "\n")
################### Predict values
# Create a new data frame for the prediction
new_data <- data.frame(months=14)
# Predict the probability of success
predicted_probability <- predict(model, new_data, type="response")
# Print the predicted probability
print(predicted_probability)
#########################################################
##           Disease outbreak example
#########################################################
disease=read.table("disease.txt",header=T)
str(disease)
table(disease$Socioeconomic_status)
disease$Socioeconomic_status=factor(disease$Socioeconomic_status)
disease$City_sector=factor(disease$City_sector)
disease$City_sector=factor(disease$City_sector)
disease$Disease_status=factor(disease$Disease_status)
str(disease)
View(disease)
#scatterplot matrix of data
# First, you need to set up the color vector based on the y variable
disease$color <- ifelse(disease$Disease_status == 1, "blue", "turquoise")
# Use the pairs function with a custom panel
pairs(disease[, c(2:5)],  # Replace Other_Variables with other columns you want to include
col = disease$color,
pch = 19,  # Type of point, 20 is a filled circle
main = "Pairs Plot for Disease Data",cex=0.5)
####### Perform logistic regression
model1 <- glm(Disease_status ~ Age+Socioeconomic_status+City_sector,
family=binomial(link="logit"),
data=disease)
# Summary of the model to get coefficients and statistics
summary(model1)
#################### Extraction of coefficients
beta <- coef(model1)
intercept <- beta[1]
slope <- beta[2]
exp(beta)
######################################################
# Iris data example - multiclass logistic regression
#####################################################
?iris
data(iris)
str(iris)
table(iris$Species)# gives count of observations in each category
require(nnet)
require(reshape2)
#set your baseline category
iris$Species2 <- relevel(iris$Species, ref = "versicolor")
mod= multinom(Species2  ~ Sepal.Length+ Petal.Length, data =iris)
summary(mod)
# Test for significance of individual variables, finding pvalue
z = summary(mod)$coefficients/summary(mod)$standard.errors
# 2-tailed z test
pvalue = (1 - pnorm(abs(z), 0, 1)) * 2
pvalue
## extract the coefficients from the model and exponentiate
exp(coef(mod))
head(pp <- fitted(mod))
######prediction
new.data <- data.frame(Sepal.Length=5.5, Petal.Length=1.8)
predict(mod, newdata = new.data, "probs")
################ Q.N. 2 #######################
# Muscle mass data
muscle_mass=read.table("muscle_mass.txt",header = T)
setwd("~/Documents/SIUE/STAT561/GitHub/Linear Regression Model")
################ Q.N. 2 #######################
# Muscle mass data
muscle_mass=read.table("muscle_mass.txt",header = T)
View(muscle_mass)
cor(muscle_mass)
############ First order model
first_order_model<-lm(mmass~age,data = muscle_mass)
s=summary(first_order_model)
s$coefficients
str(first_order_model)
pf(174.1,1,58, lower.tail=F) # p(F>174.1)
plot(muscle_mass$age, muscle_mass$mmass, main="Muscle mass VS age", xlab="Age",
ylab="Muscle Mass",
pch=19, col="blue")
abline(first_order_model,col="red")
########### Second order model
second_order_model <- lm(mmass ~ age + I(age^2), data = muscle_mass)
summary(second_order_model)
plot(muscle_mass$age, muscle_mass$mmass,
main="Muscle Mass vs Age",
xlab="Age", ylab="Muscle Mass",
pch=19, col="blue")
# Add first-order regression line (linear)
abline(first_order_model, col="red", lwd=2)  # Red line for linear model
# Add second-order regression curve (quadratic)
age_seq <- seq(min(muscle_mass$age), max(muscle_mass$age), length.out=100)  # Smooth age values
mmass_pred_quadratic <- predict(second_order_model, newdata = data.frame(age = age_seq))
lines(age_seq, mmass_pred_quadratic, col="green", lwd=2)  # Green line for quadratic model
s=summary(first_order_model)
str(first_order_model)
############ First order model
first_order_model<-lm(mmass~age,data = muscle_mass)
s=summary(first_order_model)
s$coefficients
########### Second order model
second_order_model <- lm(mmass ~ age + I(age^2), data = muscle_mass)
summary(second_order_model)
############ First order model
first_order_model<-lm(mmass~age,data = muscle_mass)
s=summary(first_order_model)
s$coefficients
str(first_order_model)
pf(174.1,1,58, lower.tail=F) # p(F>174.1)
################# (c) and (d) #######################
# Multiple Linear Regression Model
multi_reg_model=lm(pat_sat ~ pat_age + severity + anxiety, data = pat_sat)
pat_sat=read.table("pat_stat.txt",header=T)
str(pat_sat)
################## Q.N. 1 (a) ####################
################## Plot Histogram ################
predictor=colnames(pat_sat)
par(mfrow=c(2,2))  # Set layout to display multiple plots
for (col in predictor[2:length(predictor)]) {
hist(pat_sat[[col]], main=paste("Histogram of", col), xlab=col, col="pink", border="black")
}
################ Box Plot #######################
par(mfrow=c(2,2))
for(col in predictor[2:length(predictor)]){
boxplot(pat_sat[[col]],main=paste("Boxplot of", col),xlab=col, col="orange",border="black")
}
################ Summary ######################
summary(pat_sat["pat_age"])
summary(pat_sat["severity"])
summary(pat_sat["anxiety"])
################### (b) #######################
# Create scatter plot matrix for numeric predictors
numeric_cols = sapply(pat_sat, is.numeric)
numeric_data = pat_sat[, numeric_cols]
pairs(numeric_data, main="Scatter Plot Matrix of Predictors",
col="brown")
# Corelation matrix
corelation_matrix=cor(pat_sat)
print(corelation_matrix)
################# (c) and (d) #######################
# Multiple Linear Regression Model
multi_reg_model=lm(pat_sat ~ pat_age + severity + anxiety, data = pat_sat)
summary(multi_reg_model)
############ First order model
first_order_model<-lm(mmass~age,data = muscle_mass)
summary(first_order_model)
########### Second order model
second_order_model <- lm(mmass ~ age + I(age^2), data = muscle_mass)
summary(second_order_model)
